interface StatefulFunction {
    version?: string;
    (func: string, ...args: any[]): any;
    q?: any[];
}
declare global {
    interface Window {
        ownid: StatefulFunction;
    }
}
export declare type IOwnIdDataRS = any;
export interface OwnidServiceConfig extends IPartialConfig {
    sdk?: IntegrationType | string;
    overrideSdk?: string;
}
export declare enum IntegrationType {
    Gigya = "gigya",
    Firebase = "firebase"
}
export declare enum WidgetType {
    Register = "register",
    Login = "login",
    Recover = "recover"
}
export declare enum WidgetPosition {
    Start = "start",
    End = "end"
}
export declare enum Position {
    Top = "top",
    Bottom = "bottom",
    Start = "start",
    End = "end"
}
export declare enum InlineWidgetVariants {
    Button = "button",
    ButtonFingerprint = "button-fingerprint",
    ButtonFaceID = "button-faceid",
    ClientButton = "client-button",
    OwnidAuthButton = "ownid-auth-button"
}
export declare type OwnidWidgetType = WidgetType | 'register' | 'login';
declare type OwnidWidgetPosition = WidgetPosition | 'start' | 'end';
declare type OwnidPosition = Position | 'top' | 'bottom' | 'start' | 'end';
declare type OwnidInlineWidgetVariants = InlineWidgetVariants | 'button' | 'button-fingerprint' | 'client-button' | 'button-faceid' | 'ownid-auth-button';
export interface IWidgetPayload {
    error: null | true;
    message?: string;
    data?: IOwnIdDataRS;
    metadata?: {
        dataField?: string;
        collectionName?: string;
        docId?: string;
        userIdKey?: string;
    };
    loginId?: string;
}
export interface IPartialConfig {
    language?: string;
    asyncMobileRegistration?: boolean;
    appId?: string;
    env?: string;
    addOrStatement?: boolean;
    forceRender?: boolean;
    ssoUrl?: string;
    infoTooltip?: boolean;
    infoTooltipPosition?: OwnidPosition;
    mobileInfoTooltipPosition?: OwnidPosition;
    loginIdPattern?: string;
    passwordField?: HTMLInputElement | null;
    loginIdField?: HTMLInputElement | null;
    passwordToggle?: string;
    confirmPasswordContainer?: (HTMLElement | null)[] | HTMLElement | null;
    offset?: [number, number];
    serverUrl?: string;
    mobileTitle?: string;
    title?: string;
    desktopTitle?: string;
    desktopSubtitle?: string;
    statusInterval?: number;
    tooltip?: boolean | null | {
        targetEl?: HTMLElement | string | false | null;
        offset?: [number, number];
        position?: OwnidPosition;
    };
    variant?: OwnidInlineWidgetVariants;
    widgetPosition?: OwnidWidgetPosition;
    backgroundColor?: string;
    textColor?: string;
    borderColor?: string;
    boxShadow?: string;
    redirectUrl?: string;
    redirectUrlOverride?: {
        android?: string;
        ios?: string;
    };
    device?: string;
    onMagicLink?: (response: IOwnIdDataRS) => void;
    onMagicLinkError?: (errorMessage: string) => void;
    onBeforeLogin?: (response: IOwnIdDataRS) => void | Promise<void>;
    onBeforeRegister?: (response: IOwnIdDataRS) => void | Promise<void>;
    onLogin?: (response: IOwnIdDataRS) => void;
    onRegister?: (response: IOwnIdDataRS) => void;
    onError?: (error: string) => void;
    notifyLoginParams?: {
        [key: string]: any;
    };
    getAccountInfoParams?: {
        [key: string]: any;
    };
    firebaseAuth?: any;
    targetElement?: HTMLElement | null;
    targetField?: HTMLInputElement | null;
    template?: string;
}
export interface IWidgetConfig extends IPartialConfig {
    element?: HTMLElement | null;
    type: OwnidWidgetType;
}
export {};
